{"version":3,"sources":["app/components/redditApi/index.js"],"names":["App","props","_this","Object","_Users_lelong_work_github_react_template_architect_admin_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_Users_lelong_work_github_react_template_architect_admin_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_lelong_work_github_react_template_architect_admin_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","handleChange","bind","_Users_lelong_work_github_react_template_architect_admin_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_4__","handleRefreshClick","_this$props","selectReddit","selectedReddit","nextReddit","e","preventDefault","_this$props2","invalidateReddit","_this2","_this$props3","posts","isFetching","lastUpdated","errMess","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","className","onChange","target","value","map","option","key","Date","toLocaleTimeString","onClick","length","post","title","PureComponent","mapDispatchToProps","connect","state","reducerRedditApi","getIn","postsByRedditGetSelect","_isFetching$lastUpdat","undefined","now"],"mappings":"sLAMMA,cACF,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,aAAeP,EAAKO,aAAaC,KAAlBP,OAAAQ,EAAA,EAAAR,CAAAD,IACpBA,EAAKU,mBAAqBV,EAAKU,mBAAmBF,KAAxBP,OAAAQ,EAAA,EAAAR,CAAAD,IAHXA,mFAMC,IAAAW,EACyBR,KAAKJ,OAC9Ca,EAFgBD,EACRC,cADQD,EACME,qDAIbC,IAETF,EADyBT,KAAKJ,MAAtBa,cACKE,8CAGEC,GACfA,EAAEC,iBADgB,IAAAC,EAE2Bd,KAAKJ,OAClDmB,EAHkBD,EAEVC,kBAFUD,EAEQJ,iDAIrB,IAAAM,EAAAhB,KAAAiB,EAC+DjB,KAAKJ,MAAjEc,EADHO,EACGP,eAAgBQ,EADnBD,EACmBC,MAAOC,EAD1BF,EAC0BE,WAAYC,EADtCH,EACsCG,YAAaC,EADnDJ,EACmDI,QACxD,OAAIA,EACOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcJ,GAIpCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAA,UAAKd,GACLY,EAAAC,EAAAC,cAAA,UAAQE,SAAU,SAAAd,GAAC,OAAII,EAAKZ,aAAaQ,EAAEe,OAAOC,QAAQA,MAAOlB,GAC5D,CAAC,UAAW,YAAYmB,IAAI,SAAAC,GAAM,OAC/BR,EAAAC,EAAAC,cAAA,UAAQI,MAAOE,EAAQC,IAAKD,GACvBA,OAMjBR,EAAAC,EAAAC,cAAA,SACKJ,GAAeE,EAAAC,EAAAC,cAAA,+BAAuB,IAAIQ,KAAKZ,GAAaa,qBAA7C,MAChBX,EAAAC,EAAAC,cAAA,QAAMU,QAAUf,EAAuC,KAA1BnB,KAAKO,mBAA2BkB,UAAYN,EAAgC,UAAnB,kBAAtF,YAIHA,GAA+B,IAAjBD,EAAMiB,QAAgBb,EAAAC,EAAAC,cAAA,yBACnCL,GAA+B,IAAjBD,EAAMiB,QAAgBb,EAAAC,EAAAC,cAAA,oBACrCN,EAAMiB,OAAS,GACZb,EAAAC,EAAAC,cAAA,MAAIC,UAAWN,EAAa,SAAW,IAClCD,EAAMW,IAAI,SAACO,EAAML,GAAP,OACPT,EAAAC,EAAAC,cAAA,MAAIO,IAAKA,GAAMK,EAAKC,kBArD9BC,iBA6FZC,EAAqB,CACvB9B,iBACAM,sBAGWyB,sBA1BS,SAAAC,GACpB,IAAM/B,EAAiB+B,EAAMC,iBAAiBC,MAAM,CAAC,mBAE/CC,EADgBH,EAAMC,iBAAiBC,MAAM,CAAC,kBACPA,MAAM,CAACjC,IAHvBmC,EAKqB,CAC9C1B,gBAAuC2B,IAA3BF,GAA8CA,EAAuBD,MAAM,CAAC,eACxFvB,YAAcwB,GAA0BA,EAAuBD,MAAM,CAAC,iBAAoBX,KAAKe,MAC/F7B,MAAQ0B,GAA0BA,EAAuBD,MAAM,CAAC,WAAc,GAC9EtB,QAASuB,GAA0BA,EAAuBD,MAAM,CAAC,aAGrE,MAAO,CACHjC,iBACAQ,MAdyB2B,EAKE3B,MAU3BC,WAfyB0B,EAKvB1B,WAWFC,YAhByByB,EAKXzB,YAYdC,QAjByBwB,EAKSxB,UAuBtCkB,EAFWC,CAGb7C","file":"static/js/12.cdb49dcc.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { selectReddit, invalidateReddit } from './actions';\n\nclass App extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleRefreshClick = this.handleRefreshClick.bind(this);\n    }\n\n    componentDidMount() {\n        const { selectReddit, selectedReddit } = this.props;\n        selectReddit(selectedReddit);\n    }\n\n    handleChange(nextReddit) {\n        const { selectReddit } = this.props;\n        selectReddit(nextReddit);\n    }\n\n    handleRefreshClick(e) {\n        e.preventDefault();\n        const { invalidateReddit, selectedReddit } = this.props;\n        invalidateReddit(selectedReddit);\n    }\n\n    render() {\n        const { selectedReddit, posts, isFetching, lastUpdated, errMess } = this.props;\n        if (errMess) {\n            return <div className=\"reddit-api\">{errMess}</div>;\n        }\n\n        return (\n            <div className=\"reddit-api\">\n                <span>\n                    <h1>{selectedReddit}</h1>\n                    <select onChange={e => this.handleChange(e.target.value)} value={selectedReddit}>\n                        {['reactjs', 'frontend'].map(option => (\n                            <option value={option} key={option}>\n                                {option}\n                            </option>\n                        ))}\n                    </select>\n                </span>\n\n                <p>\n                    {lastUpdated && <span>Last updated at {new Date(lastUpdated).toLocaleTimeString()}. </span>}\n                    <span onClick={!isFetching ? this.handleRefreshClick : null} className={!isFetching ? 'enable refresh' : 'refresh'}>\n                        Refresh\n                    </span>\n                </p>\n                {isFetching && posts.length === 0 && <h2>Loading...</h2>}\n                {!isFetching && posts.length === 0 && <h2>Empty.</h2>}\n                {posts.length > 0 && (\n                    <ul className={isFetching ? 'loaded' : ''}>\n                        {posts.map((post, key) => (\n                            <li key={key}>{post.title}</li>\n                        ))}\n                    </ul>\n                )}\n            </div>\n        );\n    }\n}\n\nApp.propTypes = {\n    selectedReddit: PropTypes.string.isRequired,\n    posts: PropTypes.array.isRequired,\n    isFetching: PropTypes.bool.isRequired,\n    selectReddit: PropTypes.func.isRequired,\n    invalidateReddit: PropTypes.func.isRequired,\n    lastUpdated: PropTypes.number.isRequired,\n    errMess: PropTypes.string,\n};\n\nconst mapStateToProps = state => {\n    const selectedReddit = state.reducerRedditApi.getIn(['selectedReddit']);\n    const postsByReddit = state.reducerRedditApi.getIn(['postsByReddit']);\n    const postsByRedditGetSelect = postsByReddit.getIn([selectedReddit]);\n\n    let { isFetching, lastUpdated, posts, errMess } = {\n        isFetching: postsByRedditGetSelect === undefined ? true : postsByRedditGetSelect.getIn(['isFetching']),\n        lastUpdated: (postsByRedditGetSelect && postsByRedditGetSelect.getIn(['lastUpdated'])) || Date.now(),\n        posts: (postsByRedditGetSelect && postsByRedditGetSelect.getIn(['items'])) || [],\n        errMess: postsByRedditGetSelect && postsByRedditGetSelect.getIn(['errMess']),\n    };\n\n    return {\n        selectedReddit,\n        posts,\n        isFetching,\n        lastUpdated,\n        errMess,\n    };\n};\n\nconst mapDispatchToProps = {\n    selectReddit,\n    invalidateReddit,\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(App);\n"],"sourceRoot":""}